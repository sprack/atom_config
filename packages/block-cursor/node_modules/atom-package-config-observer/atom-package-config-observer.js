// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var CompositeDisposable, Emitter, PackageConfigObserver, clone, ref,
    hasProp = {}.hasOwnProperty;

  ref = require('event-kit'), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;

  clone = function(object) {
    var key, result;
    result = {};
    for (key in object) {
      if (!hasProp.call(object, key)) continue;
      result[key] = object[key];
    }
    return result;
  };

  PackageConfigObserver = (function() {
    function PackageConfigObserver(packageName) {
      this.packageName = packageName;
      this.observedScopes = {};
      this.disposables = new CompositeDisposable();
      this.emitter = new Emitter();
      this.disposables.add(this.emitter);
      this.disposables.add(atom.config.observe(this.packageName, (function(_this) {
        return function(globalConfig) {
          _this.globalConfig = globalConfig;
          return _this.emitter.emit('did-change-global-config', clone(_this.globalConfig));
        };
      })(this)));
      this.isObservingScopedConfig = false;
    }

    PackageConfigObserver.prototype.dispose = function() {
      this.disposables.dispose();
      return this.observedScopes = {};
    };

    PackageConfigObserver.prototype.observeGlobalConfig = function(cb) {
      this.emitter.on('did-change-global-config', cb);
      return cb(clone(this.globalConfig));
    };

    PackageConfigObserver.prototype.observeScopedConfig = function(cb) {
      var config, observedScope, ref1, results, scopeName;
      if (!this.isObservingScopedConfig) {
        this.startObservingScopedConfig();
      }
      this.emitter.on('did-change-scoped-config', function(arg) {
        var config, editors, scopeName;
        config = arg.config, editors = arg.editors, scopeName = arg.scopeName;
        return cb(clone(config), editors, scopeName);
      });
      ref1 = this.observedScopes;
      results = [];
      for (scopeName in ref1) {
        if (!hasProp.call(ref1, scopeName)) continue;
        observedScope = ref1[scopeName];
        config = this.configForScope(scopeName);
        results.push(cb(clone(config), observedScope.editors, scopeName));
      }
      return results;
    };

    PackageConfigObserver.prototype.onDidDisposeScope = function(cb) {
      return this.emitter.on('did-dispose-scope', cb);
    };

    PackageConfigObserver.prototype.startObservingScopedConfig = function() {
      this.disposables.add(atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          var config, observedScope, ref1, scopeName;
          scopeName = editor.getGrammar().scopeName;
          observedScope = (ref1 = _this.observedScopes[scopeName]) != null ? ref1 : _this.observeScope(scopeName);
          observedScope.subscribe(editor);
          _this.disposables.add(editor.onDidDestroy(function() {
            var ref2;
            observedScope.unsubscribe(editor);
            return ref2 = {}, editor = ref2.editor, observedScope = ref2.observedScope, ref2;
          }));
          config = _this.configForScope(scopeName);
          return _this.emitter.emit('did-change-scoped-config', {
            scopeName: scopeName,
            editors: [editor],
            config: config
          });
        };
      })(this)));
      return this.isObservingScopedConfig = true;
    };

    PackageConfigObserver.prototype.observeScope = function(scopeName) {
      var disposable, observedScope;
      observedScope = {};
      disposable = atom.config.onDidChange(this.packageName, {
        scope: [scopeName]
      }, (function(_this) {
        return function(config) {
          config = _this.configDefaults(config.newValue);
          return _this.emitter.emit('did-change-scoped-config', {
            scopeName: scopeName,
            editors: observedScope.editors,
            config: config
          });
        };
      })(this));
      observedScope.dispose = (function(_this) {
        return function() {
          var ref1;
          if (disposable.disposed) {
            return;
          }
          disposable.dispose();
          _this.emitter.emit('did-dispose-scope', scopeName);
          delete _this.observedScopes[scopeName];
          return ref1 = {}, observedScope = ref1.observedScope, disposable = ref1.disposable, scopeName = ref1.scopeName, ref1;
        };
      })(this);
      observedScope.editors = [];
      observedScope.subscribe = function(editor) {
        return this.editors.push(editor);
      };
      observedScope.unsubscribe = function(editor) {
        var index;
        index = this.editors.indexOf(editor);
        if (index === -1) {
          return;
        }
        this.editors.splice(index, 1);
        if (this.editors.length === 0) {
          return this.dispose();
        }
      };
      this.disposables.add(observedScope);
      return this.observedScopes[scopeName] = observedScope;
    };

    PackageConfigObserver.prototype.editorsForObservedScopes = function() {
      var editorsForScope, observedScope, ref1, scopeName;
      editorsForScope = {};
      ref1 = this.observedScopes;
      for (scopeName in ref1) {
        observedScope = ref1[scopeName];
        editorsForScope[scopeName] = observedScope.editors;
      }
      return editorsForScope;
    };

    PackageConfigObserver.prototype.configForScope = function(scopeName) {
      var scopedConfig;
      scopedConfig = atom.config.get(this.packageName, {
        scope: [scopeName]
      });
      return this.configDefaults(scopedConfig);
    };

    PackageConfigObserver.prototype.configDefaults = function(config) {
      var key, ref1, ref2, result, value;
      result = {};
      ref1 = this.globalConfig;
      for (key in ref1) {
        if (!hasProp.call(ref1, key)) continue;
        value = ref1[key];
        result[key] = (ref2 = config[key]) != null ? ref2 : value;
      }
      return result;
    };

    return PackageConfigObserver;

  })();

  module.exports = PackageConfigObserver;

}).call(this);
